{"ast":null,"code":"import { loadJokes } from '../Graphqlservices/requests';\nconst endpointBaseURL = 'http://localhost:5000/graphql';\n\nconst loadJoke = (state = {}, action) => {\n  switch (action.type) {\n    case 'LOADJOKE':\n      return {\n        state: {\n          loadaJoke: function loadJokes(cate) {\n            const response = fetch(endpointBaseURL, {\n              method: 'POST',\n              headers: {\n                'content-type': 'application/json'\n              },\n              body: JSON.stringify({\n                query: ` \n                                                    query JokesQuery($cate: String){\n                                                        jokes(cat:$cate){\n                                                        value\n                                                        }\n                                                    }                 \n                                                    `,\n                variables: {\n                  cate: 'money'\n                }\n              })\n            });\n            const responseBody = response.json();\n            return responseBody.data.jokes.value;\n          }\n        }\n      };\n      break;\n\n    default:\n      return state;\n  }\n};\n\nexport default loadJoke;","map":{"version":3,"sources":["C:/Users/Siqiniseko Mgazi/Documents/Website practical/SovTech Techinal Assessment/clientside/src/Reducers/loadJoke.js"],"names":["loadJokes","endpointBaseURL","loadJoke","state","action","type","loadaJoke","cate","response","fetch","method","headers","body","JSON","stringify","query","variables","responseBody","json","data","jokes","value"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,6BAAxB;AACA,MAAMC,eAAe,GAAC,+BAAtB;;AACC,MAAMC,QAAQ,GAAG,CAACC,KAAK,GAAC,EAAP,EAAUC,MAAV,KAClB;AACI,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,UAAL;AACQ,aAAO;AACJF,QAAAA,KAAK,EAAC;AAACG,UAAAA,SAAS,EAAE,SAASN,SAAT,CAAmBO,IAAnB,EACG;AACA,kBAAOC,QAAQ,GAAGC,KAAK,CAACR,eAAD,EAAiB;AAChCS,cAAAA,MAAM,EAAE,MADwB;AAEhCC,cAAAA,OAAO,EAAC;AAAC,gCAAe;AAAhB,eAFwB;AAGhCC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,gBAAAA,KAAK,EAAE;AAC3D;AACA;AACA;AACA;AACA;AACA,qDAPqE;AAQjBC,gBAAAA,SAAS,EAAC;AAACT,kBAAAA,IAAI,EAAC;AAAN;AARO,eAAf;AAH0B,aAAjB,CAAvB;AAeI,kBAAMU,YAAY,GAAET,QAAQ,CAACU,IAAT,EAApB;AAEA,mBAAOD,YAAY,CAACE,IAAb,CAAkBC,KAAlB,CAAwBC,KAA/B;AACH;AApBhB;AADF,OAAP;AAyBJ;;AAEJ;AACG,aAAOlB,KAAP;AA9BP;AAgCH,CAlCA;;AAmCD,eAAeD,QAAf","sourcesContent":["import {loadJokes} from '../Graphqlservices/requests';\r\nconst endpointBaseURL='http://localhost:5000/graphql';\r\n const loadJoke=  (state={},action)=>\r\n{\r\n    switch (action.type) {\r\n        case 'LOADJOKE':\r\n                return {\r\n                   state:{loadaJoke: function loadJokes(cate)\r\n                                        {\r\n                                        const  response=  fetch(endpointBaseURL,{\r\n                                                method: 'POST',\r\n                                                headers:{'content-type':'application/json'},\r\n                                                body: JSON.stringify({\r\n                                                    query:` \r\n                                                    query JokesQuery($cate: String){\r\n                                                        jokes(cat:$cate){\r\n                                                        value\r\n                                                        }\r\n                                                    }                 \r\n                                                    `,\r\n                                                    variables:{cate:'money'}\r\n                                                })\r\n                                            });\r\n\r\n                                            const responseBody= response.json();\r\n\r\n                                            return responseBody.data.jokes.value;\r\n                                        }\r\n                                    }\r\n                }\r\n                \r\n            break;\r\n    \r\n        default:\r\n           return state;\r\n    }\r\n}\r\nexport default loadJoke;"]},"metadata":{},"sourceType":"module"}